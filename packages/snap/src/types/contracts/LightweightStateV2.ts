/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ILightweightState {
  export type GistRootDataStruct = {
    root: BigNumberish;
    createdAtTimestamp: BigNumberish;
  };

  export type GistRootDataStructOutput = [BigNumber, BigNumber] & {
    root: BigNumber;
    createdAtTimestamp: BigNumber;
  };

  export type IdentitiesStatesRootDataStruct = {
    root: BytesLike;
    setTimestamp: BigNumberish;
  };

  export type IdentitiesStatesRootDataStructOutput = [string, BigNumber] & {
    root: string;
    setTimestamp: BigNumber;
  };

  export type StatesMerkleDataStruct = {
    issuerId: BigNumberish;
    issuerState: BigNumberish;
    createdAtTimestamp: BigNumberish;
    merkleProof: BytesLike[];
  };

  export type StatesMerkleDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    issuerId: BigNumber;
    issuerState: BigNumber;
    createdAtTimestamp: BigNumber;
    merkleProof: string[];
  };
}

export interface LightweightStateV2Interface extends utils.Interface {
  functions: {
    "P()": FunctionFragment;
    "__LightweightState_init(address,address,string,string)": FunctionFragment;
    "__Signers_init(address,string)": FunctionFragment;
    "chainName()": FunctionFragment;
    "changeSigner(bytes,bytes)": FunctionFragment;
    "changeSourceStateContract(address,bytes)": FunctionFragment;
    "checkSignatureAndIncrementNonce(uint8,address,bytes32,bytes)": FunctionFragment;
    "geGISTRootData(uint256)": FunctionFragment;
    "getCurrentGISTRootInfo()": FunctionFragment;
    "getGISTRoot()": FunctionFragment;
    "getIdentitiesStatesRootData(bytes32)": FunctionFragment;
    "getSigComponents(uint8,address)": FunctionFragment;
    "identitiesStatesRoot()": FunctionFragment;
    "isIdentitiesStatesRootExists(bytes32)": FunctionFragment;
    "nonces(address,uint8)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "signedTransitState(bytes32,(uint256,uint256),bytes)": FunctionFragment;
    "signer()": FunctionFragment;
    "sourceChainName()": FunctionFragment;
    "sourceStateContract()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "upgradeToWithSig(address,bytes)": FunctionFragment;
    "validateChangeAddressSignature(uint8,address,address,bytes)": FunctionFragment;
    "verifyStatesMerkleData((uint256,uint256,uint256,bytes32[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "P"
      | "__LightweightState_init"
      | "__Signers_init"
      | "chainName"
      | "changeSigner"
      | "changeSourceStateContract"
      | "checkSignatureAndIncrementNonce"
      | "geGISTRootData"
      | "getCurrentGISTRootInfo"
      | "getGISTRoot"
      | "getIdentitiesStatesRootData"
      | "getSigComponents"
      | "identitiesStatesRoot"
      | "isIdentitiesStatesRootExists"
      | "nonces"
      | "proxiableUUID"
      | "signedTransitState"
      | "signer"
      | "sourceChainName"
      | "sourceStateContract"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "upgradeToWithSig"
      | "validateChangeAddressSignature"
      | "verifyStatesMerkleData"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "P", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "__LightweightState_init",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "__Signers_init",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "chainName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeSigner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSourceStateContract",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatureAndIncrementNonce",
    values: [BigNumberish, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "geGISTRootData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGISTRootInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGISTRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentitiesStatesRootData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigComponents",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "identitiesStatesRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isIdentitiesStatesRootExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signedTransitState",
    values: [BytesLike, ILightweightState.GistRootDataStruct, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sourceChainName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sourceStateContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToWithSig",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateChangeAddressSignature",
    values: [BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyStatesMerkleData",
    values: [ILightweightState.StatesMerkleDataStruct]
  ): string;

  decodeFunctionResult(functionFragment: "P", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__LightweightState_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Signers_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSourceStateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatureAndIncrementNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "geGISTRootData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGISTRootInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGISTRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentitiesStatesRootData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSigComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identitiesStatesRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIdentitiesStatesRootExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signedTransitState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sourceChainName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceStateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateChangeAddressSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyStatesMerkleData",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "SignedStateTransited(uint256,bytes32)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignedStateTransited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface SignedStateTransitedEventObject {
  newGistRoot: BigNumber;
  newIdentitesStatesRoot: string;
}
export type SignedStateTransitedEvent = TypedEvent<
  [BigNumber, string],
  SignedStateTransitedEventObject
>;

export type SignedStateTransitedEventFilter =
  TypedEventFilter<SignedStateTransitedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface LightweightStateV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LightweightStateV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    P(overrides?: CallOverrides): Promise<[BigNumber]>;

    __LightweightState_init(
      signer_: string,
      sourceStateContract_: string,
      sourceChainName_: string,
      chainName_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    __Signers_init(
      signer_: string,
      chainName_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    chainName(overrides?: CallOverrides): Promise<[string]>;

    changeSigner(
      newSignerPubKey_: BytesLike,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeSourceStateContract(
      newSourceStateContract_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkSignatureAndIncrementNonce(
      methodId_: BigNumberish,
      contractAddress_: string,
      signHash_: BytesLike,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    geGISTRootData(
      root_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ILightweightState.GistRootDataStructOutput]>;

    getCurrentGISTRootInfo(
      overrides?: CallOverrides
    ): Promise<[ILightweightState.GistRootDataStructOutput]>;

    getGISTRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIdentitiesStatesRootData(
      root_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[ILightweightState.IdentitiesStatesRootDataStructOutput]>;

    getSigComponents(
      methodId_: BigNumberish,
      contractAddress_: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { chainName_: string; nonce_: BigNumber }>;

    identitiesStatesRoot(overrides?: CallOverrides): Promise<[string]>;

    isIdentitiesStatesRootExists(
      root_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    signedTransitState(
      newIdentitiesStatesRoot_: BytesLike,
      gistData_: ILightweightState.GistRootDataStruct,
      proof_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    sourceChainName(overrides?: CallOverrides): Promise<[string]>;

    sourceStateContract(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToWithSig(
      newImplementation_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validateChangeAddressSignature(
      methodId_: BigNumberish,
      contractAddress_: string,
      newAddress_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    verifyStatesMerkleData(
      statesMerkleData_: ILightweightState.StatesMerkleDataStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;
  };

  P(overrides?: CallOverrides): Promise<BigNumber>;

  __LightweightState_init(
    signer_: string,
    sourceStateContract_: string,
    sourceChainName_: string,
    chainName_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  __Signers_init(
    signer_: string,
    chainName_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  chainName(overrides?: CallOverrides): Promise<string>;

  changeSigner(
    newSignerPubKey_: BytesLike,
    signature_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeSourceStateContract(
    newSourceStateContract_: string,
    signature_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkSignatureAndIncrementNonce(
    methodId_: BigNumberish,
    contractAddress_: string,
    signHash_: BytesLike,
    signature_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  geGISTRootData(
    root_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ILightweightState.GistRootDataStructOutput>;

  getCurrentGISTRootInfo(
    overrides?: CallOverrides
  ): Promise<ILightweightState.GistRootDataStructOutput>;

  getGISTRoot(overrides?: CallOverrides): Promise<BigNumber>;

  getIdentitiesStatesRootData(
    root_: BytesLike,
    overrides?: CallOverrides
  ): Promise<ILightweightState.IdentitiesStatesRootDataStructOutput>;

  getSigComponents(
    methodId_: BigNumberish,
    contractAddress_: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { chainName_: string; nonce_: BigNumber }>;

  identitiesStatesRoot(overrides?: CallOverrides): Promise<string>;

  isIdentitiesStatesRootExists(
    root_: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonces(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  signedTransitState(
    newIdentitiesStatesRoot_: BytesLike,
    gistData_: ILightweightState.GistRootDataStruct,
    proof_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sourceChainName(overrides?: CallOverrides): Promise<string>;

  sourceStateContract(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToWithSig(
    newImplementation_: string,
    signature_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validateChangeAddressSignature(
    methodId_: BigNumberish,
    contractAddress_: string,
    newAddress_: string,
    signature_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  verifyStatesMerkleData(
    statesMerkleData_: ILightweightState.StatesMerkleDataStruct,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  callStatic: {
    P(overrides?: CallOverrides): Promise<BigNumber>;

    __LightweightState_init(
      signer_: string,
      sourceStateContract_: string,
      sourceChainName_: string,
      chainName_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    __Signers_init(
      signer_: string,
      chainName_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    chainName(overrides?: CallOverrides): Promise<string>;

    changeSigner(
      newSignerPubKey_: BytesLike,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSourceStateContract(
      newSourceStateContract_: string,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    checkSignatureAndIncrementNonce(
      methodId_: BigNumberish,
      contractAddress_: string,
      signHash_: BytesLike,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    geGISTRootData(
      root_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ILightweightState.GistRootDataStructOutput>;

    getCurrentGISTRootInfo(
      overrides?: CallOverrides
    ): Promise<ILightweightState.GistRootDataStructOutput>;

    getGISTRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getIdentitiesStatesRootData(
      root_: BytesLike,
      overrides?: CallOverrides
    ): Promise<ILightweightState.IdentitiesStatesRootDataStructOutput>;

    getSigComponents(
      methodId_: BigNumberish,
      contractAddress_: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { chainName_: string; nonce_: BigNumber }>;

    identitiesStatesRoot(overrides?: CallOverrides): Promise<string>;

    isIdentitiesStatesRootExists(
      root_: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    signedTransitState(
      newIdentitiesStatesRoot_: BytesLike,
      gistData_: ILightweightState.GistRootDataStruct,
      proof_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    sourceChainName(overrides?: CallOverrides): Promise<string>;

    sourceStateContract(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToWithSig(
      newImplementation_: string,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validateChangeAddressSignature(
      methodId_: BigNumberish,
      contractAddress_: string,
      newAddress_: string,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyStatesMerkleData(
      statesMerkleData_: ILightweightState.StatesMerkleDataStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "SignedStateTransited(uint256,bytes32)"(
      newGistRoot?: null,
      newIdentitesStatesRoot?: null
    ): SignedStateTransitedEventFilter;
    SignedStateTransited(
      newGistRoot?: null,
      newIdentitesStatesRoot?: null
    ): SignedStateTransitedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    P(overrides?: CallOverrides): Promise<BigNumber>;

    __LightweightState_init(
      signer_: string,
      sourceStateContract_: string,
      sourceChainName_: string,
      chainName_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    __Signers_init(
      signer_: string,
      chainName_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    chainName(overrides?: CallOverrides): Promise<BigNumber>;

    changeSigner(
      newSignerPubKey_: BytesLike,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeSourceStateContract(
      newSourceStateContract_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkSignatureAndIncrementNonce(
      methodId_: BigNumberish,
      contractAddress_: string,
      signHash_: BytesLike,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    geGISTRootData(
      root_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentGISTRootInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getGISTRoot(overrides?: CallOverrides): Promise<BigNumber>;

    getIdentitiesStatesRootData(
      root_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSigComponents(
      methodId_: BigNumberish,
      contractAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identitiesStatesRoot(overrides?: CallOverrides): Promise<BigNumber>;

    isIdentitiesStatesRootExists(
      root_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    signedTransitState(
      newIdentitiesStatesRoot_: BytesLike,
      gistData_: ILightweightState.GistRootDataStruct,
      proof_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    sourceChainName(overrides?: CallOverrides): Promise<BigNumber>;

    sourceStateContract(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToWithSig(
      newImplementation_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validateChangeAddressSignature(
      methodId_: BigNumberish,
      contractAddress_: string,
      newAddress_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    verifyStatesMerkleData(
      statesMerkleData_: ILightweightState.StatesMerkleDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    P(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __LightweightState_init(
      signer_: string,
      sourceStateContract_: string,
      sourceChainName_: string,
      chainName_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    __Signers_init(
      signer_: string,
      chainName_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    chainName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeSigner(
      newSignerPubKey_: BytesLike,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeSourceStateContract(
      newSourceStateContract_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkSignatureAndIncrementNonce(
      methodId_: BigNumberish,
      contractAddress_: string,
      signHash_: BytesLike,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    geGISTRootData(
      root_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentGISTRootInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGISTRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIdentitiesStatesRootData(
      root_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSigComponents(
      methodId_: BigNumberish,
      contractAddress_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identitiesStatesRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIdentitiesStatesRootExists(
      root_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signedTransitState(
      newIdentitiesStatesRoot_: BytesLike,
      gistData_: ILightweightState.GistRootDataStruct,
      proof_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sourceChainName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sourceStateContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToWithSig(
      newImplementation_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validateChangeAddressSignature(
      methodId_: BigNumberish,
      contractAddress_: string,
      newAddress_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    verifyStatesMerkleData(
      statesMerkleData_: ILightweightState.StatesMerkleDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
