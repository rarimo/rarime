/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { StateV2, StateV2Interface } from "../StateV2";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "blockN",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "state",
        type: "uint256",
      },
    ],
    name: "StateUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_CLAIM_COMMIT_COUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stateVerifier_",
        type: "address",
      },
      {
        internalType: "address",
        name: "stateVerifierWithCommit_",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "schemas_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[][]",
        name: "issuersId_",
        type: "uint256[][]",
      },
    ],
    name: "__StateV2_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "schema_",
        type: "uint256",
      },
    ],
    name: "getAllowedIssuers",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "issuerId_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "schema_",
        type: "uint256",
      },
    ],
    name: "getDetailedSchemaInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "lastSerialNumber",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "claimsCount",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "revokedClaims",
            type: "uint256[]",
          },
        ],
        internalType: "struct StateV2.SchemaInfoDetailed",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getGISTProof",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "existence",
            type: "bool",
          },
          {
            internalType: "uint256[64]",
            name: "siblings",
            type: "uint256[64]",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "auxExistence",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "auxIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "auxValue",
            type: "uint256",
          },
        ],
        internalType: "struct IState.GistProof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getGISTProofByBlock",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "existence",
            type: "bool",
          },
          {
            internalType: "uint256[64]",
            name: "siblings",
            type: "uint256[64]",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "auxExistence",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "auxIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "auxValue",
            type: "uint256",
          },
        ],
        internalType: "struct IState.GistProof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
    ],
    name: "getGISTProofByRoot",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "existence",
            type: "bool",
          },
          {
            internalType: "uint256[64]",
            name: "siblings",
            type: "uint256[64]",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "auxExistence",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "auxIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "auxValue",
            type: "uint256",
          },
        ],
        internalType: "struct IState.GistProof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getGISTProofByTime",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "existence",
            type: "bool",
          },
          {
            internalType: "uint256[64]",
            name: "siblings",
            type: "uint256[64]",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "auxExistence",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "auxIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "auxValue",
            type: "uint256",
          },
        ],
        internalType: "struct IState.GistProof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGISTRoot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "getGISTRootHistory",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedByRoot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtBlock",
            type: "uint256",
          },
        ],
        internalType: "struct IState.GistRootInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGISTRootHistoryLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "root",
        type: "uint256",
      },
    ],
    name: "getGISTRootInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedByRoot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtBlock",
            type: "uint256",
          },
        ],
        internalType: "struct IState.GistRootInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getGISTRootInfoByBlock",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedByRoot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtBlock",
            type: "uint256",
          },
        ],
        internalType: "struct IState.GistRootInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getGISTRootInfoByTime",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedByRoot",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtBlock",
            type: "uint256",
          },
        ],
        internalType: "struct IState.GistRootInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "issuersId_",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "schema_",
        type: "uint256",
      },
    ],
    name: "getNumberOfClaims",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "schema_",
        type: "uint256",
      },
    ],
    name: "getNumberOfClaims",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getStateInfoById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "state",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedByState",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtBlock",
            type: "uint256",
          },
        ],
        internalType: "struct IState.StateInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "state",
        type: "uint256",
      },
    ],
    name: "getStateInfoByIdAndState",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "state",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedByState",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtBlock",
            type: "uint256",
          },
        ],
        internalType: "struct IState.StateInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "getStateInfoHistoryById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "state",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedByState",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "createdAtBlock",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "replacedAtBlock",
            type: "uint256",
          },
        ],
        internalType: "struct IState.StateInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getStateInfoHistoryLengthById",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStateVerifier",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStateVerifierWithCommit",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "idExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "schema_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "issuerId_",
        type: "uint256",
      },
    ],
    name: "isAllowedIssuer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "schema_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "issuerId_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "serialNumber_",
        type: "uint256",
      },
    ],
    name: "isClaimRevoked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stateVerifier_",
        type: "address",
      },
      {
        internalType: "address",
        name: "stateVerifierWithCommit_",
        type: "address",
      },
    ],
    name: "setVerifier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "state",
        type: "uint256",
      },
    ],
    name: "stateExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "inputs_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[2]",
        name: "a_",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b_",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c_",
        type: "uint256[2]",
      },
    ],
    name: "transitState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "inputs_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[2]",
        name: "a_",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[2][2]",
        name: "b_",
        type: "uint256[2][2]",
      },
      {
        internalType: "uint256[2]",
        name: "c_",
        type: "uint256[2]",
      },
    ],
    name: "transitStateWithCommit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "schemas_",
        type: "uint256[]",
      },
      {
        internalType: "uint256[][]",
        name: "issuersId_",
        type: "uint256[][]",
      },
      {
        internalType: "bool",
        name: "isAdding_",
        type: "bool",
      },
    ],
    name: "updateAllowedIssuers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class StateV2__factory {
  static readonly abi = _abi;
  static createInterface(): StateV2Interface {
    return new utils.Interface(_abi) as StateV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StateV2 {
    return new Contract(address, _abi, signerOrProvider) as StateV2;
  }
}
